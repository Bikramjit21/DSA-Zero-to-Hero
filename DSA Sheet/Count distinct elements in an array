Naive Solution:

#include <bits/stdc++.h>
using namespace std;

int countDistinct(int a[], int n){
    int res = 0;
    for(int i=0;i<n;i++){
        int j = 0;
        for(j=0;j<i;j++){
            if(a[i]==a[j])
                break;
        }
        if(i==j)
            res++;
    }
    return res;
}


int main()
{
    int n;
    cin>>n;
    
    int a[n];
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    cout<<countDistinct(a,n);
    return 0;
}

Time Complexity of this solution: O(n^2)
Space Complexity of this solution: O(1)

Sorting Solution:

#include <bits/stdc++.h>
using namespace std;

int countDistinct(int a[], int n){
    sort(a,a+n);
    int res = 0;
    for(int i=0;i<n;i++){
        while(i<n-1 && a[i]==a[i+1])
            i++;
        res++;
    }
    return res;
}


int main()
{
    int n;
    cin>>n;
    
    int a[n];
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    cout<<countDistinct(a,n);
    return 0;
}

Time Complexity of this solution: O(nlogn)
Space Complexity of this solution: O(1)

Set Solution:

#include <bits/stdc++.h>
using namespace std;

int countDistinct(int a[], int n){
    unordered_set<int> s;
    for(int i=0;i<n;i++){
        s.insert(a[i]);
    }
    return s.size();
}


int main()
{
    int n;
    cin>>n;
    
    int a[n];
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    cout<<countDistinct(a,n);
    return 0;
}

Time Complexity of this solution: O(n)
Space Complexity of this solution: O(1)
